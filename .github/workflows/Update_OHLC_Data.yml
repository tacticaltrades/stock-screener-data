name: Update OHLC Data (Debug)
on:
  schedule:
    # Runs every Friday at 4:30 PM EST (9:30 PM UTC)
    - cron: '30 21 * * 5'
  workflow_dispatch:  # Allow manual triggering
permissions:
  contents: write  # Required to push changes
jobs:
  update-ohlc-data:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests
        # Verify jq is available (should be pre-installed)
        which jq || sudo apt-get update && sudo apt-get install -y jq
    
    - name: Debug environment
      run: |
        echo "=== Environment Debug ==="
        echo "Current directory: $(pwd)"
        echo "Files in directory:"
        ls -la
        echo ""
        echo "Python version: $(python --version)"
        echo "Pip packages:"
        pip list
        echo ""
        echo "Environment variables (API key check):"
        if [ -n "$POLYGON_API_KEY" ]; then
          echo "✅ POLYGON_API_KEY is set (length: ${#POLYGON_API_KEY})"
        else
          echo "❌ POLYGON_API_KEY is NOT set"
        fi
      env:
        POLYGON_API_KEY: ${{ secrets.POLYGON_API_KEY }}
    
    - name: Check if rankings.json exists and validate
      run: |
        if [ ! -f rankings.json ]; then
          echo "❌ Error: rankings.json not found!"
          exit 1
        fi
        
        echo "✅ Found rankings.json"
        echo "File size: $(du -h rankings.json | cut -f1)"
        
        # Validate JSON structure
        if jq -e '.data | length' rankings.json > /dev/null 2>&1; then
          STOCK_COUNT=$(jq '.data | length' rankings.json)
          echo "✅ JSON structure valid with $STOCK_COUNT stocks"
          
          # Show first few symbols
          echo "First 5 symbols:"
          jq -r '.data[:5] | .[] | .symbol' rankings.json
        else
          echo "❌ JSON structure invalid"
          echo "JSON validation error:"
          jq '.data | length' rankings.json
          exit 1
        fi
    
    - name: Run OHLC full rebuild (with detailed logging)
      env:
        POLYGON_API_KEY: ${{ secrets.POLYGON_API_KEY }}
      run: |
        echo "=== Starting OHLC full rebuild at $(date) ==="
        echo "Python script: process_ohlc_full.py"
        echo ""
        
        # Check if script exists
        if [ ! -f process_ohlc_full.py ]; then
          echo "❌ Python script not found!"
          ls -la *.py
          exit 1
        fi
        
        echo "✅ Python script found"
        echo "Script size: $(du -h process_ohlc_full.py | cut -f1)"
        echo ""
        
        # Run with explicit error handling
        if python process_ohlc_full.py; then
          echo "✅ Python script completed successfully"
        else
          echo "❌ Python script failed with exit code $?"
          echo "Last 50 lines of any log files:"
          tail -n 50 *.log 2>/dev/null || echo "No log files found"
          exit 1
        fi
        
        echo "=== OHLC full rebuild completed at $(date) ==="
    
    - name: Debug output files
      run: |
        echo "=== Output Files Debug ==="
        echo "All files in directory after script:"
        ls -la
        echo ""
        
        # Check for any OHLC files
        echo "OHLC-related files:"
        ls -la ohlc* 2>/dev/null || echo "No ohlc* files found"
        echo ""
        
        # Check for any JSON files
        echo "All JSON files:"
        ls -la *.json
        echo ""
        
        # Check file sizes
        echo "File sizes:"
        du -h *.json 2>/dev/null || echo "No JSON files to measure"
    
    - name: Verify generated files (enhanced)
      run: |
        echo "=== File Verification ==="
        
        # Check for split OHLC files
        OHLC_FILES=$(ls ohlc_*.json 2>/dev/null | wc -l)
        echo "Found $OHLC_FILES OHLC split files"
        
        if [ $OHLC_FILES -gt 0 ]; then
          echo "✅ OHLC files generated successfully"
          echo "Generated files:"
          ls -lh ohlc_*.json | awk '{print "  " $9 ": " $5}'
          
          # Test first file content
          FIRST_FILE=$(ls ohlc_*.json | head -1)
          echo ""
          echo "Sample content from $FIRST_FILE:"
          if jq -e '.data | keys | length' "$FIRST_FILE" > /dev/null 2>&1; then
            SYMBOL_COUNT=$(jq '.data | keys | length' "$FIRST_FILE")
            echo "  ✅ Contains $SYMBOL_COUNT symbols"
            echo "  Sample symbols: $(jq -r '.data | keys[:3] | join(", ")' "$FIRST_FILE")"
            
            # Check if symbols have data
            FIRST_SYMBOL=$(jq -r '.data | keys[0]' "$FIRST_FILE")
            TIMEFRAMES=$(jq -r ".data[\"$FIRST_SYMBOL\"] | keys | join(\", \")" "$FIRST_FILE")
            echo "  Timeframes: $TIMEFRAMES"
            
            # Check data points
            DAILY_COUNT=$(jq -r ".data[\"$FIRST_SYMBOL\"][\"1D\"] | length" "$FIRST_FILE" 2>/dev/null || echo "0")
            echo "  Daily bars for $FIRST_SYMBOL: $DAILY_COUNT"
            
          else
            echo "  ❌ File structure invalid"
            echo "  File content preview:"
            head -n 10 "$FIRST_FILE"
          fi
          
          # Verify index file
          if [ -f ohlc_index.json ]; then
            echo ""
            echo "✅ OHLC index file generated"
            echo "Index file size: $(du -h ohlc_index.json | cut -f1)"
            
            # Verify JSON structure of index
            if jq -e '.files | length' ohlc_index.json > /dev/null 2>&1; then
              echo "✅ ohlc_index.json structure valid"
              
              # Show summary stats
              echo ""
              echo "Summary from index:"
              echo "- Total symbols: $(jq -r '.total_symbols // "N/A"' ohlc_index.json)"
              echo "- Last updated: $(jq -r '.last_updated // "N/A"' ohlc_index.json)"
              echo "- Update type: $(jq -r '.update_type // "N/A"' ohlc_index.json)"
              echo "- Split files: $(jq -r '.files | length // "N/A"' ohlc_index.json)"
            else
              echo "❌ ohlc_index.json structure invalid"
              echo "Index file content preview:"
              head -n 10 ohlc_index.json
              exit 1
            fi
          else
            echo "❌ OHLC index file not found"
            exit 1
          fi
        else
          echo "❌ No OHLC split files found after rebuild"
          echo "This indicates the Python script didn't generate output files"
          echo "Check if there were any errors in the Python script execution above"
          exit 1
        fi
    
    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
    
    - name: Commit and push changes
      run: |
        # Add all OHLC related files
        git add ohlc_*.json ohlc_index.json
        
        # Remove old single file if it exists
        git rm ohlc.json 2>/dev/null || true
        
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Weekly OHLC data full rebuild (split files) - $(date -u '+%Y-%m-%d %H:%M:%S') UTC"
          git push
          echo "✅ Changes committed and pushed successfully"
        fi
    
    - name: Create workflow summary
      run: |
        echo "## OHLC Full Rebuild Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Date**: $(date -u '+%Y-%m-%d %H:%M:%S') UTC" >> $GITHUB_STEP_SUMMARY
        echo "- **Symbols processed**: $(jq -r '.total_symbols // "N/A"' ohlc_index.json)" >> $GITHUB_STEP_SUMMARY
        echo "- **Split files**: $(jq -r '.files | length // "N/A"' ohlc_index.json)" >> $GITHUB_STEP_SUMMARY
        echo "- **Total size**: $(du -ch ohlc_*.json 2>/dev/null | tail -1 | cut -f1 || echo "N/A")" >> $GITHUB_STEP_SUMMARY
        echo "- **Update type**: Full rebuild" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### File Details:" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        ls -lh ohlc_*.json 2>/dev/null | awk '{print $9 ": " $5}' || echo "No files generated" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ Weekly OHLC data rebuild completed successfully" >> $GITHUB_STEP_SUMMARY
