name: Update OHLC Data
on:
  schedule:
    # Runs every Friday at 4:30 PM EST (9:30 PM UTC)
    - cron: '30 21 * * 5'
  workflow_dispatch:  # Allow manual triggering
permissions:
  contents: write  # Required to push changes
jobs:
  update-ohlc-data:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests
    
    - name: Comprehensive file debugging
      run: |
        echo "=== Complete File System Debug ==="
        echo "Current working directory: $(pwd)"
        echo "User: $(whoami)"
        echo ""
        
        echo "=== All files in directory ==="
        ls -la
        echo ""
        
        echo "=== Looking for JSON files ==="
        find . -name "*.json" -type f 2>/dev/null | head -10
        echo ""
        
        echo "=== Checking rankings.json specifically ==="
        if [ -f rankings.json ]; then
          echo "✅ rankings.json EXISTS"
          echo "File permissions: $(ls -l rankings.json)"
          echo "File size: $(wc -c < rankings.json) bytes"
          echo "File type: $(file rankings.json)"
          
          # Check if readable
          if [ -r rankings.json ]; then
            echo "✅ File is readable"
            
            # Show raw content with different methods
            echo ""
            echo "=== Raw content (first 500 chars) ==="
            head -c 500 rankings.json
            echo ""
            echo "=== End of raw content ==="
            
            echo ""
            echo "=== Hex dump (first 100 bytes) ==="
            xxd -l 100 rankings.json
            
            echo ""
            echo "=== Character analysis ==="
            echo "First character ASCII value: $(head -c 1 rankings.json | od -An -tu1)"
            echo "Last character ASCII value: $(tail -c 1 rankings.json | od -An -tu1)"
            
          else
            echo "❌ File is not readable!"
          fi
        else
          echo "❌ rankings.json DOES NOT EXIST"
        fi
        
        echo ""
        echo "=== Python JSON test ==="
        python3 -c "
        import json
        import sys
        import os
        
        print('Python working directory:', os.getcwd())
        print('Files Python can see:', [f for f in os.listdir('.') if f.endswith('.json')])
        
        if os.path.exists('rankings.json'):
            print('✅ Python can see rankings.json')
            
            try:
                stat = os.stat('rankings.json')
                print(f'File size from Python: {stat.st_size} bytes')
                print(f'File mode: {oct(stat.st_mode)}')
                
                # Try to read
                with open('rankings.json', 'rb') as f:  # Read as binary first
                    raw_bytes = f.read(100)
                print(f'First 100 bytes (hex): {raw_bytes.hex()}')
                print(f'First 100 bytes (repr): {repr(raw_bytes)}')
                
                # Try to read as text
                with open('rankings.json', 'r', encoding='utf-8') as f:
                    content = f.read(200)
                print(f'First 200 chars as text: {repr(content)}')
                
                # Try JSON parse
                with open('rankings.json', 'r', encoding='utf-8') as f:
                    data = json.load(f)
                print(f'✅ JSON parsed successfully! Found {len(data.get(\"data\", []))} stocks')
                
            except Exception as e:
                print(f'❌ Python error: {type(e).__name__}: {e}')
                import traceback
                traceback.print_exc()
        else:
            print('❌ Python cannot see rankings.json')
        "
    
    - name: Check if rankings.json exists
      run: |
        if [ ! -f rankings.json ]; then
          echo "Error: rankings.json not found!"
          exit 1
        fi
        echo "Found rankings.json with $(jq '.data | length' rankings.json) stocks"
    
    - name: Run OHLC full rebuild
      env:
        POLYGON_API_KEY: ${{ secrets.POLYGON_API_KEY }}
      run: |
        echo "Starting OHLC full rebuild at $(date)"
        python process_ohlc_full.py
        echo "OHLC full rebuild completed at $(date)"
    
    - name: Verify generated files
      run: |
        # Check for split OHLC files
        OHLC_FILES=$(ls ohlc_*.json 2>/dev/null | wc -l)
        if [ $OHLC_FILES -gt 0 ]; then
          echo "✅ OHLC files generated successfully"
          echo "Generated $OHLC_FILES OHLC split files:"
          ls -lh ohlc_*.json | awk '{print $9 ": " $5}'
          
          # Verify index file
          if [ -f ohlc_index.json ]; then
            echo "✅ OHLC index file generated"
            echo "Index file size: $(du -h ohlc_index.json | cut -f1)"
            
            # Verify JSON structure of index
            jq -e '.files | length' ohlc_index.json > /dev/null && echo "✅ ohlc_index.json structure valid"
            
            # Show summary stats
            echo "Summary:"
            echo "- Total symbols: $(jq -r '.total_symbols' ohlc_index.json)"
            echo "- Last updated: $(jq -r '.last_updated' ohlc_index.json)"
            echo "- Update type: $(jq -r '.update_type' ohlc_index.json)"
            echo "- Split files: $(jq -r '.files | length' ohlc_index.json)"
          else
            echo "❌ OHLC index file not found"
            exit 1
          fi
        else
          echo "❌ No OHLC split files found after rebuild"
          echo "This might indicate an issue with the Python script"
          echo "Check Python script logs above for errors"
          exit 1
        fi
    
    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
    
    - name: Commit and push changes
      run: |
        # Add all OHLC related files
        git add ohlc_*.json ohlc_index.json
        
        # Remove old single file if it exists
        git rm ohlc.json 2>/dev/null || true
        
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Weekly OHLC data full rebuild (split files) - $(date -u '+%Y-%m-%d %H:%M:%S') UTC"
          git push
          echo "✅ Changes committed and pushed successfully"
        fi
    
    - name: Create workflow summary
      run: |
        echo "## OHLC Full Rebuild Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Date**: $(date -u '+%Y-%m-%d %H:%M:%S') UTC" >> $GITHUB_STEP_SUMMARY
        echo "- **Symbols processed**: $(jq -r '.total_symbols' ohlc_index.json)" >> $GITHUB_STEP_SUMMARY
        echo "- **Split files**: $(jq -r '.files | length' ohlc_index.json)" >> $GITHUB_STEP_SUMMARY
        echo "- **Total size**: $(du -ch ohlc_*.json | tail -1 | cut -f1)" >> $GITHUB_STEP_SUMMARY
        echo "- **Update type**: Full rebuild" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### File Details:" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        ls -lh ohlc_*.json | awk '{print $9 ": " $5}' >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ Weekly OHLC data rebuild completed successfully" >> $GITHUB_STEP_SUMMARY
